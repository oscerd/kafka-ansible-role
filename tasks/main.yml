---
# tasks file for kafka
  - yum:
      name: tar
      state: latest

  - name: Ansible check Kafka distro kit exists.
    stat:
      path: "{{ path_dir }}/kafka_{{ scala_version }}-{{ kafka_version }}.tgz"
    register: kafka_kit_details

  - debug:
      msg: "The {{ path_dir }}/{{ kafka_version }}.tgz doesn't exist"
    when: not kafka_kit_details.stat.exists
    failed_when:

  - name: download kafka
    when: not kafka_kit_details.stat.exists
    get_url:
      url: https://archive.apache.org/dist/kafka/{{ kafka_version }}/kafka_{{ scala_version }}-{{ kafka_version }}.tgz
      dest: "{{ path_dir }}"
      mode: 0440 

  - name: Ansible check directory exists.
    stat:
      path: "{{ unarchive_dest_dir }}"
    register: file_details

  - debug:
      msg: "The directory {{ unarchive_dest_dir }} exists"
    when: file_details.stat.exists

  - name: Create directory if it doesn't exists.
    file:
      path: "{{ unarchive_dest_dir }}"
      state: directory
      recurse: yes
      force: yes
    when: not file_details.stat.exists 

  - name: Ansible unarchive destination directory exists.
    stat:
      path: "{{ unarchive_dest_dir }}/kafka_{{ scala_version }}-{{ kafka_version }}"
    register: unarchivedir

  - name: unarchive the Kafka distro
    shell: "tar -xzf {{ path_dir }}/kafka_{{ scala_version }}-{{ kafka_version }}.tgz -C {{ unarchive_dest_dir }}"
    args:
      warn: false
    when: not unarchivedir.stat.exists 

  - name: Override plugin.path if the plugin.path variable is defined for connect standalone properties
    lineinfile:
      dest: '{{ unarchive_dest_dir }}/kafka_{{ scala_version }}-{{ kafka_version }}/config/connect-standalone.properties'
      line: 'plugin.path={{plugin_path_dir}}'
      regexp: 'plugin.path=*'
    when: plugin_path_dir is defined

  - name: Override plugin.path if the plugin.path variable is defined for connect distributed properties
    lineinfile:
      dest: '{{ unarchive_dest_dir }}/kafka_{{ scala_version }}-{{ kafka_version }}/config/connect-distributed.properties'
      line: 'plugin.path={{plugin_path_dir}}'
      regexp: 'plugin.path=*'
    when: plugin_path_dir is defined

  - name: Check plugin.path directory exists.
    stat:
      path: "{{ plugin_path_dir }}"
    register: plugin_path_details
    when: plugin_path_dir is defined

  - debug:
      msg: "The directory {{ plugin_path_dir }} exists"
    when: plugin_path_dir is defined and plugin_path_details.stat.exists 

  - name: Create plugin.path directory if it doesn't exists.
    file:
      path: "{{ plugin_path_dir }}"
      state: directory
      recurse: yes
      force: yes
    when: plugin_path_dir is defined and not plugin_path_details.stat.exists

  - name: Download connectors
    get_url:
      url: "https://repo1.maven.org/maven2/org/apache/camel/kafkaconnector/camel-{{ item }}-kafka-connector/{{ connectors_version }}/camel-{{ item }}-kafka-connector-{{ connectors_version }}-package.tar.gz"
      dest: "{{ plugin_path_dir }}/camel-{{ item }}-kafka-connector-{{ connectors_version }}-package.tar.gz"
      mode: 0440
    with_items:
      - '{{ connectors }}'
    when: connectors is defined and plugin_path_dir is defined 

  - name: Unarchive connectors
    shell: "tar -xzf {{ plugin_path_dir }}/camel-{{ item }}-kafka-connector-{{ connectors_version }}-package.tar.gz -C {{ plugin_path_dir }}"
    args:
      warn: false 
    with_items:
      - '{{ connectors }}'
    when: connectors is defined and plugin_path_dir is defined

  - name: Run zookeeper as Daemon
    shell: '{{ unarchive_dest_dir }}/kafka_{{ scala_version }}-{{ kafka_version }}/bin/zookeeper-server-start.sh -daemon {{ unarchive_dest_dir }}/kafka_{{ scala_version }}-{{ kafka_version }}/config/zookeeper.properties && sleep {{ wait_time_zookeeper }}'
    when: start_kafka

  - name: Run kafka as Daemon
    shell: '{{ unarchive_dest_dir }}/kafka_{{ scala_version }}-{{ kafka_version }}/bin/kafka-server-start.sh -daemon {{ unarchive_dest_dir }}/kafka_{{ scala_version }}-{{ kafka_version }}/config/server.properties && sleep {{ wait_time_kafka }}'
    when: start_kafka

